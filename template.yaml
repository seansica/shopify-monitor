AWSTemplateFormatVersion: 2010-09-09
Description: >-
  shopify-bot

Transform:
- AWS::Serverless-2016-10-31

Globals:
  Function:
    Layers:
      - !Ref RuntimeDependenciesLayer
    Environment:
      Variables:
        Region: 'us-east-1'
    Runtime: nodejs18.x
    MemorySize: 128
    Timeout: 100

Resources:

  ConfigFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: .
      Handler: dist/handlers/config.handler
#      Runtime: nodejs18.x
      Architectures:
        - x86_64
#      MemorySize: 128
#      Timeout: 100
      Description: Stores Shopify sites and Discord webhook parameters (excluding the secure API key - that is stored in Secrets Manager)
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConfigTable
      Environment:
        Variables:
          # The ConfigTable stores the list of Shopify sites that the ShopifySyncFunction will check
          CONFIG_TABLE: !Ref ConfigTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /config
            Method: POST

  ShopifySyncFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: .
      Handler: dist/handlers/shopify-sync.handler
#      Runtime: nodejs18.x
      Architectures:
        - x86_64
#      MemorySize: 128
#      Timeout: 100
      Description: Scans Shopify sites and writes updates to a DynamoDB table
      Policies:
          # Give Create/Read/Update/Delete Permissions to the InventoryTable
        - DynamoDBCrudPolicy:
            TableName: !Ref InventoryTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ConfigTable
      Environment:
        Variables:
          # The ConfigTable stores the list of Shopify sites that the ShopifySyncFunction will check
          CONFIG_TABLE: !Ref ConfigTable
          # The InventoryTable stores the product/stock items that were retrieved from the sites
          INVENTORY_TABLE: !Ref InventoryTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: GET
        Schedule:
          Type: Schedule
          Properties:
            Schedule: rate(5 minutes)
            Name: ShopifySyncSchedule
            Description: Schedules the ShopifySyncFunction to run every 5 minutes
            Enabled: true
            RetryPolicy:
                MaximumEventAgeInSeconds: 86400
                MaximumRetryAttempts: 185

  DiscordSnsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: .
      Handler: dist/handlers/discord-sns.handler
#      Runtime: nodejs18.x
      Architectures:
        - x86_64
#      MemorySize: 128
#      Timeout: 100
      Description: |2
        Receives DynamoDB event streams from the InventoryTable and decides whether a Discord message should be sent. If
        so, then craft notify the SNS Topic. DiscordNotificationFunction subscribes and sends messages from the queue.
      Environment:
        Variables:
          TOPIC_ARN: !Ref DiscordSNSTopic
      Events:
        StreamEvent:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt InventoryTable.StreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 1
            Enabled: true

  DiscordSNSTopic:
    # The DiscordSns Lambda function sends messages to the topic.
    # The DiscordNotification Lambda function subscribes to this topic.
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: "Discord Message Queue"
      Subscription:
        - Endpoint:
            Fn::GetAtt:
              - 'DiscordNotificationFunction'
              - 'Arn'
          Protocol: "lambda"
      TopicName: "DiscordSNSTopic"

  DiscordNotificationFunction:
    # This Lambda function sends Discord messages via HTTP webhook
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: .
      Handler: dist/handlers/discord-notification.handler
#      Runtime: nodejs18.x
      Architectures:
        - x86_64
#      MemorySize: 256 # TODO test if 128 can be used instead
#      Timeout: 100
      Description: Sends a Discord notification when a product is available
      Policies:
        - DynamoDBCrudPolicy:
            # Grants Create/Read/Update/Delete Permissions on the table
            TableName: !Ref InventoryTable
        - DynamoDBStreamReadPolicy:
            # Grants the DescribeStream, GetRecords, GetShardIterator, ListStreams actions on the table
            TableName: !Ref InventoryTable
            StreamName: !GetAtt InventoryTable.StreamArn
        - AWSSecretsManagerGetSecretValuePolicy:
            # Grants read access to Secrets Manager; used to retrieve Discord API key
            SecretArn: !Ref DiscordApiKey
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          INVENTORY_TABLE: !Ref InventoryTable
          DISCORD_SECRET_ARN: !Ref DiscordApiKey
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: POST
        SNSEvent:
          Type: SNS
          Properties:
            Topic:
              Ref: DiscordSNSTopic
#            SqsSubscription: true
#            FilterPolicy:
#              store:
#                - example_corp
#              price_usd:
#                - numeric:
#                    - ">="
#                    - 100

        # TODO delete the following StreamEvent after implementing the new SNS workflow
        #StreamEvent:
        #  Type: DynamoDB
        #  Properties:
        #    Stream: !GetAtt InventoryTable.StreamArn
        #    StartingPosition: TRIM_HORIZON
        #    BatchSize: 1
        #    Enabled: true

        # Uncomment the following Schedule event if you would prefer to automatically run the
        # DiscordNotificationFunction on a regular schedule:

        # Schedule:
        #   Type: Schedule
        #   Properties:
        #     Schedule: rate(5 minutes)
        #     Name: DiscordNotificationSchedule
        #     Description: Schedules the DiscordNotificationFunction to run every 5 minutes
        #     Enabled: true
        #     RetryPolicy:
        #         MaximumEventAgeInSeconds: 86400
        #         MaximumRetryAttempts: 185

  RuntimeDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: makefile
    Properties:
      Description: Runtime dependencies for Lambdas
      ContentUri: ./
      CompatibleRuntimes:
        - nodejs18.x
      RetentionPolicy: Retain

  ConfigTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: name
          AttributeType: S
      KeySchema:
        - AttributeName: name
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  InventoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  DiscordApiKey:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: 'This is the sensitive hash value that comes after "api/hooks/" in the Discord API key'
      Name: DiscordApiKey
      SecretString: '{"discord-api-key":"this-is-not-a-valid-key-please-replace"}'

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
